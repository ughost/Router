/* AUTOGENERATED DEVELOPMENT CODE */
(function() {
    this.Router = {
        storage: {},
        get: function(selector, params) {
            var collection, j, len, param, regexp, stage, stages, storage, value;
            if (selector.indexOf("." !== -1)) {
                stages = selector.split(".");
                storage = this.storage;
                for (j = 0, len = stages.length; j < len; j++) {
                    stage = stages[j];
                    if (stage.length === 0) {
                        value = "";
                        break;
                    }
                    collection = storage[stage];
                    if (collection !== void 0) {
                        if (typeof collection !== "string") {
                            storage = collection;
                        } else {
                            value = collection;
                        }
                    } else {
                        value = "";
                        break;
                    }
                }
            } else {
                value = this.storage[selector] || "";
            }
            if (params !== void 0) {
                for (param in params) {
                    regexp = new RegExp("\\%" + param + "\\%", i);
                    value = value.replace(regexp, params[param]);
                }
            }
            return value;
        },
        set: function(selector, value) {
            var collection, j, len, results, stage, stages, storage;
            if (value === void 0) {
                return this.storage[selector] = value;
            } else {
                stages = selector.split(".");
                storage = this.storage;
                results = [];
                for (j = 0, len = stages.length; j < len; j++) {
                    stage = stages[j];
                    if (stage.length === 0) {
                        break;
                    }
                    collection = storage[stage];
                    if (collection === void 0) {
                        collection = storage[stage] = {};
                    }
                    if (typeof collection !== "object") {
                        break;
                    } else {
                        results.push(storage = collection);
                    }
                }
                return results;
            }
        }
    };
}).call(this);